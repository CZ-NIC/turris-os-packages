#!/bin/sh
. /lib/functions.sh
# netifd provides default network overlay with current runtime configuration. We
# are not interested in that. We need to work with real content of /etc/config so
# we disable state loading.
LOAD_STATE=
config_load network

if [ "$(cat /tmp/sysinfo/model)" = "Turris" ]; then
	# Turris 1.x
	CPU_LAN_1="eth0"
	CPU_TRUNK_1="6"
	CPU_LAN_2="eth1"
	CPU_TRUNK_2="0"
	WAN="eth2"
	NEW_WAN="eth2"
else
	# Turris Omnia
	CPU_LAN_1="eth0"
	CPU_TRUNK_1="5"
	CPU_LAN_2="eth2"
	CPU_TRUNK_2="6"
	WAN="eth1"
	NEW_WAN="eth2"
fi

vlandir="$(mktemp -d)"
freevlandir="$(mktemp -d)"
cleanup() {
	rm -rf "$vlandir" "$freelandir"
}
trap cleanup EXIT TERM INT QUIT ABRT

vlan_handle() {
	local vlan="$1"
	local ports vid
	config_get ports "$vlan" ports
	config_get vid "$vlan" vlan 0
	config_get vid "$vlan" vid "$vid"
	local freevlan="y"
	for port in $ports; do
		case "$port" in
			"$CPU_TRUNK_1")
				freevlan="n"
				echo "$vlan" > "$vlandir/$CPU_LAN_1"
				;;
			"${CPU_TRUNK_1}t")
				freevlan="n"
				echo "$vlan" > "$vlandir/$CPU_LAN_1.$vid"
				;;
			"$CPU_TRUNK_2")
				freevlan="n"
				echo "$vlan" > "$vlandir/$CPU_LAN_2"
				;;
			"${CPU_TRUNK_2}t")
				freevlan="n"
				echo "$vlan" > "$vlandir/$CPU_LAN_2.$vid"
				;;
		esac
	done
	if [ "$freevlan" = "y" ]; then
		# The VLAN has no termination in CPU. This is sort of smart switch
		# setup. We have to create a new bridge for such network.
		touch "$freevlandir/$vlan"
	fi
}
config_foreach vlan_handle switch_vlan

append_lan_ports() {
	local vlan="$1"
	local ports vid
	config_get ports "$vlan" ports
	config_get vid "$vlan" vlan 0
	config_get vid "$vlan" vid "$vid"
	for port in $ports; do
		case "$port" in
			"$CPU_TRUNK_1"|"${CPU_TRUNK_1}t"|"$CPU_TRUNK_2"|"${CPU_TRUNK_2}t")
				# Ignore CPU ports those are managed by DSA
				;;
			*t)
				append new_ifname "lan${port%t}.${vid}"
				;;
			*)
				append new_ifname "lan${port}"
				;;
		esac
	done
}
set_new_ifname_ports() {
	uci delete "network.$cnf.ifname" 2>/dev/null || true
	case "$new_ifname" in
		*\ *)
			for ifn in $new_ifname; do
				uci add_list "network.$cnf.ifname=$ifn"
			done
			;;
		*)
			uci set "network.$cnf.ifname=$new_ifname"
			;;
	esac
}


interface_handle() {
	local cnf="$1"
	local ifnames new_ifname
	config_get ifnames "$cnf" ifname
	for ifn in $ifnames; do
		case "$ifn" in
			"${CPU_LAN_1}"*|"${CPU_LAN_2}"*)
				[ -f "$vlandir/$ifn" ] || continue # ignore VLANs that are not in switch
				# Note: there can be tagged vlan going to switch but if switch is not
				# configured for it it does not work anyway.
				append_lan_ports "$(cat "$vlandir/$ifn")"
				;;
			"${WAN}"*)
				# Replace new old wan with new one and keep any VLAN configuration
				append new_ifname "${NEW_WAN}${ifn#${WAN}}"
				;;
			*)
				append new_ifname "$ifn"
				;;
		esac
	done
	set_new_ifname_ports
}
config_foreach interface_handle interface

free_vlan_interface() {
	local vlan="$1"
	local cnf new_ifname
	cnf="$(uci add network interface)"
	uci set "network.$cnf.proto=none"
	append_lan_ports "$vlan"
	# Note: there are no CPU ports
	set_new_ifname_ports
}
for freevlan in "$freevlandir"/*; do
	[ -f "$freevlan" ] || continue
	free_vlan_interface "${freevlan##*/}"
done


network_section_remove() {
	uci delete "network.$1"
}
config_foreach network_section_remove switch
config_foreach network_section_remove switch_vlan
config_foreach network_section_remove switch_port

uci commit network

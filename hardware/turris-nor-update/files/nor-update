#!/bin/sh
set -eu

DEVEL=""
VERBOSE=""
BACKUP_UBOOT_ENV="/usr/share/nor-update/uboot-env.backup"

SECURE_FIRMWARE="secure-firmware.bin"
SECURE_FIRMWARE_PART=""
# There can't be automatically build secure firmware as it needs to be signed
SECURE_FIRMWARE_DEVEL=""

UBOOT="uboot"
UBOOT_PART=""
UBOOT_DEVEL=""

RESCUE="rescue"
RESCUE_PART=""
RESCUE_DEVEL="/usr/share/rescue-image/image.fit.lzma"

DTB="dtb"
DTB_PART=""
DTB_DEVEL="$(ls -1 /boot/*turris*.dtb 2> /dev/null | head -n1)"

board_pre_hook() {
    :
}

board_post_hook() {
    :
}

board_ubootenv_hook() {
    :
}

# Note: die and v_echo might be used by board configuration so they are defined early

die() {
    echo "${0##*/}:" "$@" >&2
    exit 1
}

# Echo that works only in verbose mode
v_echo() {
    [ -z "$VERBOSE" ] || echo "$@" >&2
}

###################################
. "/usr/share/nor-update/config.sh"
###################################

print_usage() {
    echo "Usage: ${0##*/} [-d] [-v]"
}

print_help() {
    print_usage
    echo "Turris NOR firmware update utility."
    echo
    echo "Options:"
    echo "    -d   Use devel version - bleeding edge, but it might brick your device. Proceed with caution!"
    echo "    -v   Be verbose about what is going on"
    echo "    -h   Show help"
}

flash() {
    local flashing="$1"
    local part="$2"
    local preupdate_hook="$3"
    local postupdate_hook="$4"

    [ -n "$part" ] || return 0

    shift 2

    while [ "$#" -gt 0 ] && [ ! -r "$1" ]; do
        shift
    done

    if [ "$#" -eq 0 ]; then
        echo "Can't find anything to flash to '$flashing' partition"
        return 0
    fi

    if [ ! -c "/dev/$part" ]; then
        die "/dev/$part is missing!"
    fi

    v_echo "Checking and flashing '$flashing' partition: $1 -> /dev/$part"
    if mtd verify "$1" "/dev/$part"; then
        v_echo "Partition with $flashing was up to date already."
    else
        "$preupdate_hook"
        mtd -e "/dev/$part" write "$1" "/dev/$part" || \
            die "Flashing '$flashing' partition (/dev/$part) failed!"
        "$postupdate_hook"
    fi
}

uboot_preupdate() {
    BACKUP_UBOOT_ENV="/usr/share/nor-update/uboot-env.backup"
    v_echo "Storing old U-boot environment to be preserved"
    fw_printenv >"$BACKUP_UBOOT_ENV" || {
        # Let's assume that there is a default environment if we can't read it.
        rm -f "$BACKUP_UBOOT_ENV"
        return 0
    }
    board_ubootenv_hook  # to perform any possible migrations
}

uboot_postupdate() {
    [ -f "$BACKUP_UBOOT_ENV" ] || return 0
    if ! fw_printenv >/dev/null 2>&1; then
        echo "Updating configuration for U-Boot environment access."
        rm -f /etc/config/ubootenv
        fw_env-config-init.sh
    fi

    if [ "$(fw_printenv 2>/dev/null)" = "$(cat "$BACKUP_UBOOT_ENV")" ]; then
        # The environment is the same so no migration is needed
        rm "$BACKUP_UBOOT_ENV"
        return 0
    fi

    if fw_setenv -s "$BACKUP_UBOOT_ENV"; then
        echo "Your U-Boot environment was migrated to new U-Boot"
        echo "You can find it in $BACKUP_UBOOT_ENV"
        echo "You can reset it via 'fw_setenv bootcmd \"env default -f -a; saveenv; reset\"'"
    else
        echo "Migration of your U-Boot environment failed."
        echo "You can find it in $BACKUP_UBOOT_ENV"
        echo "Set whatever you need manually via 'fw_setenv'"
    fi
}

# We need boot.scr in root of Btrfs partition to be symlink to @ subvolume to
# be able to boot via distroboot that wasn't used on older boards.
fix_boot_scr() (
    local dev="$(sed -n 's|^\(/dev/[a-z0-9]*\) / btrfs .*|\1|p' /proc/mounts)"
    # Fix is required only for BTRFS. No need to continue if root filesystem is not BTRFS.
    [ -n "$dev" ] || return 0
    tmpdir="$(mktemp -d)"
    [ -n "$tmpdir" ] || die "Can't create a temp directory!"
    trap 'umount -fl "$tmpdir" && rmdir "$tmpdir"' EXIT
    mount "$dev" "$tmpdir" || die "Can't mount root filesystem"
    [ -e "$tmpdir"/boot.scr ] || \
        ln -sf @/boot/boot.scr "$tmpdir"/boot.scr || \
            die "Can't create boot.scr symlink"
)

while getopts ':dvh' OPT; do
    case "$OPT" in
        d)
            DEVEL="y"
            ;;
        v)
            VERBOSE="y"
            ;;
        h)
            print_help
            exit 0
            ;;
        \?)
            print_usage
            die "Illegal option '-$OPTARG'"
            exit 1
            ;;
    esac
done
shift $(( OPTIND-1 ))
[ $# -eq 0 ] || {
    print_usage
    die "Provided too many arguments. See help \`-h\`"
}

fix_boot_scr

# To simplify the configuration so we can use relative paths for parts of the firmware
cd "/usr/share/nor-update/"

if [ -z "$DEVEL" ]; then
    SECURE_FIRMWARE_DEVEL=""
    UBOOT_DEVEL=""
    RESCUE_DEVEL=""
    DTB_DEVEL=""
fi

board_pre_hook
flash "secure firmware" "$SECURE_FIRMWARE_PART" true true "$SECURE_FIRMWARE_DEVEL" "$SECURE_FIRMWARE"
flash "U-Boot" "$UBOOT_PART" uboot_preupdate uboot_postupdate "$UBOOT_DEVEL" "$UBOOT"
flash "rescue system" "$RESCUE_PART" true true "$RESCUE_DEVEL" "$RESCUE"
flash "dtb" "$DTB_PART" true true "$DTB_DEVEL" "$DTB"
board_post_hook

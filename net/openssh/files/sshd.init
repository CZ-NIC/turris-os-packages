#!/bin/sh /etc/rc.common
# Copyright (C) 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)
# Copyright (C) 2006-2011 OpenWrt.org

START=50
STOP=50

SERVICE_USE_PID=1

CONFIGFILE="/var/etc/ssh/sshd_config"

INDENT=""

header() {
    cat > "$CONFIGFILE" <<-EOF
# auto-generated config file from /etc/config/sshd

EOF
}

indent_reset() {
    INDENT=""
}

indent_higher() {
    INDENT="${INDENT}\t"
}

set_parameter() {
    local section="$1"
    local var="$2"
    local opt="$3"
    local def="$4"
    local val

    config_get val "$section" "$var"
    val=${val:-$def}
    if [ -n "$val" ]; then
        echo -e "${INDENT}${opt} ${val}" >> "$CONFIGFILE"
    fi
}

add_parameter() {
    val="$1"
    opt="$2"
    echo -e "${INDENT}${opt} ${val}" >> "$CONFIGFILE"
}

set_multiple_parameters() {
    local section="$1"
    local var="$2"
    local opt="$3"

    config_list_foreach "$section" "$var" add_parameter "$opt"
}

handle_openssh_section(){
    local config="$1"

    set_multiple_parameters "$config" Port Port
    set_parameter "$config" AddressFamily AddressFamily
    set_multiple_parameters "$config" ListenAddress ListenAddress
    set_parameter "$config" Protocol Protocol
    set_multiple_parameters "$config" HostKey HostKey
    set_multiple_parameters "$config" HostCertificate HostCertificate
    set_parameter "$config" HostKeyAgent HostKeyAgent
    set_parameter "$config" KeyRegenerationInterval KeyRegenerationInterval
    set_parameter "$config" ServerKeyBits ServerKeyBits
    set_parameter "$config" SyslogFacility SyslogFacility
    set_parameter "$config" LogLevel LogLevel
    set_parameter "$config" LoginGraceTime LoginGraceTime
    set_parameter "$config" PermitRootLogin PermitRootLogin
    set_parameter "$config" StrictModes StrictModes
    set_parameter "$config" MaxAuthTries MaxAuthTries
    set_parameter "$config" MaxSessions MaxSessions
    set_parameter "$config" AuthenticationMethods AuthenticationMethods
    set_parameter "$config" RSAAuthentication RSAAuthentication
    set_parameter "$config" PubkeyAuthentication PubkeyAuthentication
    set_parameter "$config" AuthorizedKeysFile AuthorizedKeysFile .ssh/authorized_keys
    set_parameter "$config" AuthorizedPrincipalsFile AuthorizedPrincipalsFile
    set_parameter "$config" AuthorizedKeysCommand AuthorizedKeysCommand
    set_parameter "$config" AuthorizedKeysCommandUser AuthorizedKeysCommandUser
    set_parameter "$config" RhostsRSAAuthentication RhostsRSAAuthentication
    set_parameter "$config" HostbasedAuthentication HostbasedAuthentication
    set_parameter "$config" IgnoreUserKnownHosts IgnoreUserKnownHosts
    set_parameter "$config" IgnoreRhosts IgnoreRhosts
    set_parameter "$config" PasswordAuthentication PasswordAuthentication
    set_parameter "$config" PermitEmptyPasswords PermitEmptyPasswords
    set_parameter "$config" Ciphers Ciphers
    set_parameter "$config" RekeyLimit RekeyLimit
    set_parameter "$config" RevokedKeys RevokedKeys
    set_parameter "$config" KexAlgorithms KexAlgorithms
    set_parameter "$config" MACs MACs
    set_parameter "$config" ChallengeResponseAuthentication ChallengeResponseAuthentication
    set_parameter "$config" KerberosAuthentication KerberosAuthentication
    set_parameter "$config" KerberosOrLocalPasswd KerberosOrLocalPasswd
    set_parameter "$config" KerberosTicketCleanup KerberosTicketCleanup
    set_parameter "$config" KerberosGetAFSToken KerberosGetAFSToken
    set_parameter "$config" GSSAPIAuthentication GSSAPIAuthentication
    set_parameter "$config" GSSAPICleanupCredentials GSSAPICleanupCredentials
    set_parameter "$config" UsePAM UsePAM
    set_parameter "$config" AllowAgentForwarding AllowAgentForwarding
    set_parameter "$config" AllowTcpForwarding AllowTcpForwarding
    set_parameter "$config" GatewayPorts GatewayPorts
    set_parameter "$config" X11Forwarding X11Forwarding
    set_parameter "$config" X11DisplayOffset X11DisplayOffset
    set_parameter "$config" X11UseLocalhost X11UseLocalhost
    set_parameter "$config" XAuthLocation XAuthLocation
    set_parameter "$config" PrintMotd PrintMotd
    set_parameter "$config" PrintLastLog PrintLastLog
    set_parameter "$config" TCPKeepAlive TCPKeepAlive
    set_parameter "$config" UseLogin UseLogin
    set_parameter "$config" PermitUserEnvironment PermitUserEnvironment
    set_parameter "$config" Compression Compression
    set_parameter "$config" ClientAliveInterval ClientAliveInterval
    set_parameter "$config" ClientAliveCountMax ClientAliveCountMax
    set_parameter "$config" UseDNS UseDNS
    set_parameter "$config" PidFile PidFile
    set_parameter "$config" MaxStartups MaxStartups
    set_parameter "$config" PermitTunnel PermitTunnel
    set_parameter "$config" PermitTTY PermitTTY
    set_parameter "$config" ChrootDirectory ChrootDirectory
    set_parameter "$config" VersionAddendum VersionAddendum
    set_parameter "$config" Banner Banner
    set_multiple_parameters "$config" IPQoS IPQoS
    set_multiple_parameters "$config" AcceptEnv AcceptEnv
    set_multiple_parameters "$config" AllowUsers AllowUsers
    set_multiple_parameters "$config" AllowGroups AllowGroups
    set_multiple_parameters "$config" DenyUsers DenyUsers
    set_multiple_parameters "$config" DenyGroups DenyGroups
    set_parameter "$config" TrustedUserCAKeys TrustedUserCAKeys
    set_multiple_parameters "$config" Subsystem Subsystem
}

handle_match_section() {
    local config="$1"
    local type=""
    local match=""

    config_get type "$section" type
    config_get match "$section" match

    if [ -n "$type" -a -n "$match" ]; then

        # Generate match
        echo -e "Match ${type} ${match}" >> "$CONFIGFILE"

        indent_higher

        set_parameter "$config" AllowAgentForwarding AllowAgentForwarding
        set_parameter "$config" AllowTcpForwarding AllowTcpForwarding
        set_parameter "$config" AuthorizedKeysFile AuthorizedKeysFile
        set_parameter "$config" AuthorizedPrincipalsFile AuthorizedPrincipalsFile
        set_parameter "$config" Banner Banner
        set_parameter "$config" ChrootDirectory ChrootDirectory
        set_parameter "$config" ForceCommand ForceCommand
        set_parameter "$config" GatewayPorts GatewayPorts
        set_parameter "$config" GSSAPIAuthentication GSSAPIAuthentication
        set_parameter "$config" HostbasedAuthentication HostbasedAuthentication
        set_parameter "$config" HostbasedUsesNameFromPacketOnly HostbasedUsesNameFromPacketOnly
        set_parameter "$config" KbdInteractiveAuthentication KbdInteractiveAuthentication
        set_parameter "$config" KerberosAuthentication KerberosAuthentication
        set_parameter "$config" MaxAuthTries MaxAuthTries
        set_parameter "$config" MaxSessions MaxSessions
        set_parameter "$config" PasswordAuthentication PasswordAuthentication
        set_parameter "$config" PermitEmptyPasswords PermitEmptyPasswords
        set_parameter "$config" PermitOpen PermitOpen
        set_parameter "$config" PermitRootLogin PermitRootLogin
        set_parameter "$config" PermitTunnel PermitTunnel
        set_parameter "$config" PubkeyAuthentication PubkeyAuthentication
        set_parameter "$config" RhostsRSAAuthentication RhostsRSAAuthentication
        set_parameter "$config" RSAAuthentication RSAAuthentication
        set_parameter "$config" X11DisplayOffset X11DisplayOffset
        set_parameter "$config" X11Forwarding X11Forwarding
        set_parameter "$config" X11UseLocalHost X11UseLocalHost

        indent_reset
    fi
}

#create sshd confing file
init_sshd() {

    mkdir -p $(dirname "$CONFIGFILE")

    #Clear the config and set header
    header

    config_load sshd

    config_foreach handle_openssh_section openssh
    config_foreach handle_match_section match
}

start() {
	init_sshd

    # This code can be probably replaced by ssh-keygen -A (present since 6.4 version)
	for type in rsa dsa ecdsa ed25519; do {
		# check for keys
		key=/etc/ssh/ssh_host_${type}_key
		[ ! -s $key ] && {
			# try to remove the key - it might be empty
			[ -f $key ] && rm -f $key
			# generate missing keys
			[ -x /usr/bin/ssh-keygen ] && {
				mkdir -p /etc/ssh
				/usr/bin/ssh-keygen -N '' -t $type -f $key 2>&- >&-
			}
		}
	}; done

	user_exists sshd 22 || user_add sshd 22 22 sshd /var/empty
	group_exists sshd 22 || group_add sshd 22 
	mkdir -m 0700 -p /var/empty
	service_start /usr/sbin/sshd -f "$CONFIGFILE"
}

reload() {
    init_sshd

    service_reload /usr/sbin/sshd -f "$CONFIGFILE"
}

stop() {
	service_stop /usr/sbin/sshd
}

shutdown() {
	local pid
	local pids
	local pid_mine

	stop

	# kill active clients
	pid_mine="$$"
	pids="$(pidof sshd)"
	for pid in $pids; do
		[ "$pid" = "$pid_mine" ] && continue
		[ -e "/proc/$pid/stat" ] && kill $pid
	done
}

#!/bin/sh /etc/rc.common
#Copyright (C) 2013 CZ.NIC z.s.p.o. (http://www.nic.cz/)

. /usr/share/resolver/functions.sh

START=61
USE_PROCD=1

CONFIGFILE="/var/etc/unbound/unbound.conf"
ROOTKEYFILE="/etc/root.keys"
ROOTKEYFILE_TMP="/var/etc/unbound/root.keys"
DHCPLEASES="/tmp/dhcp.leases.dynamic"
STATICLEASES="/var/etc/unbound/static.leases"
USERNAME=unbound
GROUP=unbound

header() {
    cat > "$CONFIGFILE" <<-EOF
# auto-generated config file from /etc/config/resolver
EOF
}

set_section() {
    section="$1"
}

add_section() {
    section="$1"
    name="${2:-$1}"

    echo "$name:" >> "$CONFIGFILE"
}

add_include() {
    include_path="$1"
    echo "include: \"$include_path\"" >> "$CONFIGFILE"
}

set_local_zone() {
    host_filename=$1
    if [ "$host_filename" ] && [ -e "$host_filename" ]; then
        sed -n \
        -e 's|^[[:blank:]]*\([0-9.]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN A \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9a-f:]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN AAAA \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9.]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)[[:blank:]#].*|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN A \1\"|p' \
        -e 's|^[[:blank:]]*\([0-9a-f:]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)[[:blank:]#].*|\tlocal-zone: "\2." static\n\tlocal-data: "\2. IN AAAA \1\"|p' "$host_filename" >> "$CONFIGFILE"
        sed -n \
        -e 's|^[[:blank:]]*\([0-9.]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\1 \2.|p' \
        -e 's|^[[:blank:]]*\([0-9a-f:]\+\)[[:blank:]]\+\([^#[:blank:]]\+\)$|\1 \2.|p' "$host_filename" >> "$STATICLEASES"
    fi
}

set_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get val "$section" "$var"
    val=${val:-$def}
    echo -e "\t$opt: $val" >> "$CONFIGFILE"
}

set_quoted_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get val "$section" "$var"
    val=${val:-$def}
    echo -e "\t$opt: \"$val\"" >> "$CONFIGFILE"
}

set_bool_parameter() {
    local var="$1"
    local opt="$2"
    local def="$3"
    local val

    config_get_bool val "$section" "$var"
    val=${val:-$def}
    val=$(echo $val | sed -e "s/1/yes/g" -e "s/0/no/g")
    echo -e "\t$opt: $val" >> "$CONFIGFILE"

}

add_parameter() {
    val="$1"
    opt="$2"
    echo -e "\t$opt: $val" >> "$CONFIGFILE"
}

set_multiple_parameters() {
    local var="$1"
    local opt="$2"

    config_list_foreach "$section" "$var" add_parameter "$opt"
}

set_rootkey() {
    local var="$1"
    local val

    config_get val "$section" "$var"
    ROOTKEYFILE="$val"
}

# Check the /etc/unbound/root.key is reasonable and try to fix it with given command
check_root_key() {
    # Don't do anything if it looks OK
    grep -qE '[[:space:]](DNSKEY|DS|TYPE[[:digit:]][[:digit:]])[[:space:]]' $ROOTKEYFILE && return
    # Not OK -> run the command and hope for the best
    echo "Trying to restore broken $ROOTKEYFILE with command $@" | logger -t unbound -p daemon.warning
    eval "$@"
}

get_local_domain() {
    config_get DOMAIN $1 local
    if [ -n "$DOMAIN" ]; then
        DOMAIN="`echo "$DOMAIN" | sed 's|/||g'`"
        echo "  local-zone: \"$DOMAIN.\" static" >> "$CONFIGFILE"
    fi
}

set_local_host() {
    config_get NAME $1 name
    config_get IP $1 ip
    if [ -n "$NAME" ] && [ -n "$DOMAIN" ] && [ -n "$IP" ]; then
        echo "  local-data: \"$NAME.$DOMAIN. IN A $IP\"" >> "$CONFIGFILE"
        echo "  local-data-ptr: \"$IP $NAME.$DOMAIN\"" >> "$CONFIGFILE"
        echo "$IP $NAME.$DOMAIN.">>$STATICLEASES
    fi
}

#initialize everything
init_unbound() {
    config_load resolver

    local ignore_root_key
    local hostname_config
    local static_domains
    local dynamic_domains
    local resolv_conf_path

    # Test for resolv.conf.auto new location
    # https://github.com/openwrt/openwrt/commit/cd48d8d3420dd4df03daaa548227ceb487ba7104
	resolv_conf_path="$(ls -1 /etc/resolv.conf.d/resolv.conf.vpn.* 2>/dev/null | head -n1)"
    if [ \! -f "$resolv_conf_path" ]; then
        if [ -f "/tmp/resolv.conf.d/resolv.conf.auto" ]; then
            resolv_conf_path="/tmp/resolv.conf.d/resolv.conf.auto"
        elif [ -f "/tmp/resolv.conf.auto" ]; then
            resolv_conf_path="/tmp/resolv.conf.auto"
        else
            resolv_conf_path=""
            echo "Error! File resolv.conf.auto is missing"
        fi
    fi

    config_get_bool ignore_root_key common ignore_root_key 0

    # Do not try to restore the root key if it's not used
    if [ "$ignore_root_key" = "0" ] ; then
        # Sometimes, the root anchor is broken. We first try unbound-anchor (with and without upstream DNS servers).
        check_root_key unbound-anchor -f "$resolv_conf_path"
        check_root_key unbound-anchor
        # unbound-anchor is of no use :-(. Try to restore it from the certificate backup, if there's anything.
        check_root_key cert-backup -x $ROOTKEYFILE
        # No more ideas what to do, so just try running unbound, something of the above may have worked.
    fi

    # Clear the config and set header
    header

    # Clear static leases
    echo "">$STATICLEASES

    config_load resolver

    #Server Section
    add_section common server
    echo '	chroot: ""' >> "$CONFIGFILE"
    set_parameter verbose verbosity 1
    set_multiple_parameters interface interface
    set_parameter port port 53

    if [ "$ignore_root_key" = "0" ] ; then
        set_rootkey keyfile
        # copy rootkey file with right permissions
        cp "$ROOTKEYFILE" "$ROOTKEYFILE_TMP"
        chown $USERNAME:$GROUP "$ROOTKEYFILE_TMP"
        add_parameter "$ROOTKEYFILE_TMP" "auto-trust-anchor-file"
    fi

    set_parameter edns_buffer_size edns-buffer-size 1232
    set_parameter msg_cache_size msg-cache-size 100k

    config_get_bool net_ipv4 common net_ipv4 1
    config_get_bool net_ipv6 common net_ipv6 1

    # IPv6 and IPv4 bool settings
    # net_ipv6 & net_ipv4 are used only for setting
    # outgoing interface and are no longer used to
    # sets do-ipv4 or do-ipv6
    [ "$net_ipv4" = "1" ] && \
        echo '	outgoing-interface: 0.0.0.0/0'>>$CONFIGFILE
    [ "$net_ipv6" = "1" ] && \
        echo '	outgoing-interface: ::0/0'>>$CONFIGFILE
    if [ "$net_ipv6" = "0" ] && [ "$net_ipv4" = "0" ]; then
        # both net_ipv4 and net_ipv6
        echo "Error! net_ipv6 and net_ipv4 setting in /etc/config/resolver is incorrect."
        echo "Failback to net_ipv6=0 and net_ipv4=1 setting"
        # Allow only outgoint ipv4
        echo '	outgoing-interface: 0.0.0.0/0'>>$CONFIGFILE
    fi
    set_parameter prefetch prefetch yes

    config_get hostname_config "unbound" hostname_config ""
    if [ -n "$hostname_config" ] && [ -e "$hostname_config" ] ; then
        set_local_zone $hostname_config
    fi

    config_get_bool static_domains "common" static_domains 1
    config_load dhcp
    if [ "$static_domains" == "1" ] ; then
        config_foreach get_local_domain dnsmasq
        config_foreach set_local_host host
        config_foreach set_local_host domain
    fi


    config_load resolver

    set_section unbound
    set_parameter outgoing_range outgoing-range 60
    set_parameter outgoing_num_tcp outgoing-num-tcp 128
    set_parameter incoming_num_tcp incoming-num-tcp 128
    set_parameter msg_cache_slabs msg-cache-slabs 1
    set_parameter num_queries_per_thread num-queries-per-thread 30
    set_parameter rrset_cache_slabs rrset-cache-slabs 1
    set_parameter rrset_cache_size rrset-cache-size 100k
    set_parameter infra_cache_slabs infra-cache-slabs 1
    set_parameter infra_cache_numhosts infra-cache-numhosts 200

    # Related to issue https://gitlab.nic.cz/turris/os/packages/-/issues/748
    set_parameter cache_max_negative_ttl cache-max-negative-ttl 1000

    set_multiple_parameters access_control access-control
    set_quoted_parameter username username "$USERNAME"
    set_quoted_parameter pidfile pidfile "/var/run/unbound.pid"
    set_quoted_parameter root_hints root-hints "/etc/unbound/named.cache"
    set_quoted_parameter target_fetch_policy target-fetch-policy "2 1 0 0 0 0"
    set_parameter harden_short_bufsize harden-short-bufsize yes
    set_parameter harden_large_queries harden-large-queries yes

    set_parameter qname_minimisation qname-minimisation yes
    set_parameter harden_below_nxdomain harden-below-nxdomain yes

    set_parameter key_cache_size key-cache-size 100k
    set_parameter key_cache_slabs key-cache-slabs 1
    set_parameter neg_cache_size neg-cache-size 10k
    set_parameter prefetch prefetch yes
    set_parameter prefetch_key prefetch-key yes

    #Includes
    config_list_foreach unbound_includes include_path add_include

    #Python section
    add_section unbound_python python
    set_multiple_parameters python_script python-script

    #Remote Control
    add_section unbound_remote_control remote-control
    set_parameter control_enable control-enable no
    set_multiple_parameters control_interface control-interface
    set_parameter control_use_cert control-use-cert yes
    set_parameter control_port control-port 8953
    set_quoted_parameter server_key_file server-key-file "/etc/unbound/unbound_server.key"
    set_quoted_parameter server_cert_file server-cert-file "/etc/unbound/unbound_server.pem"
    set_quoted_parameter control_key_file control-key-file "/etc/unbound/unbound_control.key"
    set_quoted_parameter control_cert_file control-cert-file "/etc/unbound/unbound_control.pem"

    local do_forward
    config_get_bool do_forward common forward_upstream 1
    config_get forward_dns common forward_custom

    #check custom forwarding
    if [ -n "$forward_dns" ] && [ "$do_forward" = "1" ]; then
        dns_config_load "$forward_dns" print_unbound_forward_config
    else
    if [ "$do_forward" = "1" ] ; then
        local SERVERS
        # Max number of servers used for forwarding is 10
        SERVERS=$(get_servers_ip_addresses "$net_ipv4" "$net_ipv6" "$resolv_conf_path" 10)

        if [ -n "$SERVERS" ] ; then
            (
            echo 'forward-zone:'
            echo '	name: "."'
            echo '	forward-first: yes'
            for SERVER in $SERVERS ; do
                echo "	forward-addr: $SERVER"
            done
            ) >> "$CONFIGFILE"
        fi
    fi
    fi
}

print_unbound_forward_config() {

    local ip_list="$1"
    local enable_tls="$2"
    local port="$3"
    local pin_sha256="$4"
    local hostname="$5"
    local ca_files="$6"

    # check ca_file
    if [ ! -z "$ca_file" ] && [ -f "$ca_file" ] && [ ! -z "$hostname" ]; then
        echo "server:">>$CONFIGFILE
        echo "	tls-cert-bundle: \"$ca_file\" ">>$CONFIGFILE
    fi

    # set forwarding
    echo "forward-zone:">>$CONFIGFILE
    echo '	name: "."'>>$CONFIGFILE

    # check tls forwarding
    if [ "$enable_tls" == "1" ]; then
        echo "	forward-tls-upstream: yes">>$CONFIGFILE
    else
        echo "	forward-tls-upstream: no">>$CONFIGFILE
    fi

    for ip in $ip_list
    do
        if [ ! -z "$ip" ]; then
            #check nonstandard port
            val_ipport="" #check nonstandard port
            if [ "$port" == "853" ] || [ -z "$port" ]; then
                val_ipport="$ip@853"
            else
                val_ipport="$ip@$port"
            fi
            if [ ! -z "$hostname" ]; then
                echo "	forward-addr: $val_ipport#$hostname" >> $CONFIGFILE
            else
                echo "	forward-addr: $val_ipport" >> $CONFIGFILE
            fi
        fi
    done
}

start_service() {

    mkdir -p $(dirname "$CONFIGFILE")
    chown $USERNAME:$GROUP $(dirname "$CONFIGFILE")
    [ -f /etc/unbound/named.cache ] && chmod o+r /etc/unbound/named.cache

    init_unbound
    config_get pidfile common pidfile /var/run/unbound.pid
    if [ -e /usr/sbin/unbound-checkconf ] ; then
        echo "Check generated config $CONFIGFILE:"
        unbound-checkconf "$CONFIGFILE"
    fi
    procd_open_instance
    procd_set_param file /etc/config/resolver
    procd_set_param command unbound -d
    procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-5} ${respawn_retry:-5}
    procd_set_param nice '-5'
    procd_set_param pidfile $pidfile
    procd_close_instance
}

reload_service() {
    stop
    start
}

From 00b49780eac133ca31a4f3579918b135ef3ffd1a Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Martin=20Petr=C3=A1=C4=8Dek?= <martin.petracek@nic.cz>
Date: Tue, 29 Aug 2017 14:35:44 +0200
Subject: [PATCH] mac keyword rule

---
 src/Makefile.am  |   1 +
 src/detect-mac.c | 241 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/detect-mac.h |  34 ++++++++
 src/detect.c     |   2 +
 src/detect.h     |   2 +
 5 files changed, 280 insertions(+)
 create mode 100644 src/detect-mac.c
 create mode 100644 src/detect-mac.h

--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -245,6 +245,7 @@ detect-tls-cert-validity.c detect-tls-ce
 detect-tls-version.c detect-tls-version.h \
 detect-tos.c detect-tos.h \
 detect-ttl.c detect-ttl.h \
+detect-mac.c detect-mac.h \
 detect-uricontent.c detect-uricontent.h \
 detect-urilen.c detect-urilen.h \
 detect-window.c detect-window.h \
--- /dev/null
+++ b/src/detect-mac.c
@@ -0,0 +1,241 @@
+/* Copyright (C) 2007-2017 Open Information Security Foundation
+ *
+ * You can copy, redistribute or modify this Program under the terms of
+ * the GNU General Public License version 2 as published by the Free
+ * Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * version 2 along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ */
+
+/**
+ * \file
+ *
+ * \author Martin Petracek <martin.petracek@nic.cz>
+ *
+ * Implements the mac keyword
+ */
+
+#include "suricata-common.h"
+#include "stream-tcp.h"
+#include "util-unittest.h"
+
+#include "detect.h"
+#include "detect-parse.h"
+#include "detect-engine-prefilter-common.h"
+
+#include "detect-mac.h"
+#include "util-debug.h"
+
+/*prototypes*/
+static int DetectMacMatch (ThreadVars *, DetectEngineThreadCtx *, Packet *,
+        const Signature *, const SigMatchCtx *);
+static int DetectMacSetup (DetectEngineCtx *, Signature *, const char *);
+void DetectMacFree (void *);
+void DetectMacRegisterTests (void);
+
+static int PrefilterSetupMac(SigGroupHead *sgh);
+static _Bool PrefilterMacIsPrefilterable(const Signature *s);
+
+/**
+ * \brief Registration function for mac: keyword
+ */
+
+void DetectMacRegister(void)
+{
+    sigmatch_table[DETECT_MAC].name = "mac";
+    sigmatch_table[DETECT_MAC].desc = "check for a source mac address";
+    sigmatch_table[DETECT_MAC].url = DOC_URL DOC_VERSION "/rules/header-keywords.html#mac";
+    sigmatch_table[DETECT_MAC].Match = DetectMacMatch;
+    sigmatch_table[DETECT_MAC].Setup = DetectMacSetup;
+    sigmatch_table[DETECT_MAC].Free = DetectMacFree;
+    //sigmatch_table[DETECT_MAC].RegisterTests = DetectMacRegisterTests; //TODO
+
+    sigmatch_table[DETECT_MAC].SupportsPrefilter = PrefilterMacIsPrefilterable;
+    //sigmatch_table[DETECT_MAC].SetupPrefilter = PrefilterSetupMac;
+
+    return;
+}
+
+/**
+ * \brief This function is used to match TTL rule option on a packet with those passed via mac:
+ *
+ * \param t pointer to thread vars
+ * \param det_ctx pointer to the pattern matcher thread
+ * \param p pointer to the current packet
+ * \param m pointer to the sigmatch that we will cast into DetectMacData
+ *
+ * \retval 0 no match
+ * \retval 1 match
+ */
+static int DetectMacMatch (ThreadVars *t, DetectEngineThreadCtx *det_ctx, Packet *p,
+        const Signature *s, const SigMatchCtx *ctx)
+{
+
+    if (PKT_IS_PSEUDOPKT(p))
+        return 0;
+	const uint8_t *src=NULL;
+#ifdef NFQ
+	if (p->flow->hw_address_src_known) src=p->flow->hw_address_src;
+#endif
+	else if (p->ethh) {
+		src=p->ethh->eth_src;
+	}
+	if (!src) return 0;
+    const DetectMacData *macd = (const DetectMacData *)ctx;
+
+    return (memcmp(src, macd->mac, 6)==0);
+}
+
+/**
+ * \brief This function is used to parse MAC address passed via mac: keyword
+ *
+ * \param macstr Pointer to the user provided mac options
+ *
+ * \retval macd pointer to DetectMacData on success
+ * \retval NULL on failure
+ */
+
+static DetectMacData *DetectMacParse (const char *macstr)
+{
+    DetectMacData *macd = NULL;
+    int ret = 0;
+	
+	uint8_t mac[6];
+	
+	ret = sscanf(macstr, "%hhx:%hhx:%hhx:%hhx:%hhx:%hhx", &mac[0], &mac[1], &mac[2], &mac[3], &mac[4], &mac[5]);
+	
+	if(ret!=6) {
+		SCLogError(SC_ERR_INVALID_VALUE, "cannot parse string '%s' as MAC address", macstr);
+	}
+
+    macd = SCMalloc(sizeof (DetectMacData));
+    if (unlikely(macd == NULL))
+        goto error;
+    memcpy(macd->mac, mac, 6);
+
+    return macd;
+
+error:
+    if (macd)
+        SCFree(macd);
+    return NULL;
+}
+
+/**
+ * \brief this function is used to amacd the parsed mac data into the current signature
+ *
+ * \param de_ctx pointer to the Detection Engine Context
+ * \param s pointer to the Current Signature
+ * \param macstr pointer to the user provided mac options
+ *
+ * \retval 0 on Success
+ * \retval -1 on Failure
+ */
+static int DetectMacSetup (DetectEngineCtx *de_ctx, Signature *s, const char *macstr)
+{
+    DetectMacData *macd = NULL;
+    SigMatch *sm = NULL;
+
+    macd = DetectMacParse(macstr);
+    if (macd == NULL)
+        goto error;
+
+    sm = SigMatchAlloc();
+    if (sm == NULL)
+        goto error;
+
+    sm->type = DETECT_MAC;
+    sm->ctx = (SigMatchCtx *)macd;
+
+    SigMatchAppendSMToList(s, sm, DETECT_SM_LIST_MATCH);
+    //s->flags |= SIG_FLAG_REQUIRE_PACKET;
+
+    return 0;
+
+error:
+    if (macd != NULL) DetectMacFree(macd);
+    if (sm != NULL) SCFree(sm);
+    return -1;
+}
+
+/**
+ * \brief this function will free memory associated with DetectMacData
+ *
+ * \param ptr pointer to DetectMacData
+ */
+void DetectMacFree(void *ptr)
+{
+    DetectMacData *macd = (DetectMacData *)ptr;
+    SCFree(macd);
+}
+
+/* prefilter code */
+/*
+static void
+PrefilterPacketMacMatch(DetectEngineThreadCtx *det_ctx, Packet *p, const void *pectx)
+{
+    if (PKT_IS_PSEUDOPKT(p)) {
+        SCReturn;
+    }
+
+    uint8_t pmac;
+    if (PKT_IS_IPV4(p)) {
+        pmac = IPV4_GET_IPTTL(p);
+    } else if (PKT_IS_IPV6(p)) {
+        pmac = IPV6_GET_HLIM(p);
+    } else {
+        SCLogDebug("Packet is of not IPv4 or IPv6");
+        return;
+    }
+
+    const PrefilterPacketHeaderCtx *ctx = pectx;
+    if (PrefilterPacketHeaderExtraMatch(ctx, p) == FALSE)
+        return;
+
+    if (MacMatch(pmac, ctx->v1.u8[0], ctx->v1.u8[1], ctx->v1.u8[2]))
+    {
+        SCLogDebug("packet matches mac/hl %u", pmac);
+        PrefilterAddSids(&det_ctx->pmq, ctx->sigs_array, ctx->sigs_cnt);
+    }
+}
+
+static void
+PrefilterPacketMacSet(PrefilterPacketHeaderValue *v, void *smctx)
+{
+    const DetectMacData *a = smctx;
+    v->u8[0] = a->mode;
+    v->u8[1] = a->mac1;
+    v->u8[2] = a->mac2;
+}
+
+static _Bool
+PrefilterPacketMacCompare(PrefilterPacketHeaderValue v, void *smctx)
+{
+    const DetectMacData *a = smctx;
+    if (v.u8[0] == a->mode &&
+        v.u8[1] == a->mac1 &&
+        v.u8[2] == a->mac2)
+        return TRUE;
+    return FALSE;
+}
+
+static int PrefilterSetupMac(SigGroupHead *sgh)
+{
+    return PrefilterSetupPacketHeader(sgh, DETECT_MAC,
+            PrefilterPacketMacSet,
+            PrefilterPacketMacCompare,
+            PrefilterPacketMacMatch);
+}*/
+
+static _Bool PrefilterMacIsPrefilterable(const Signature *s)
+{
+    return FALSE;
+}
--- /dev/null
+++ b/src/detect-mac.h
@@ -0,0 +1,34 @@
+/* Copyright (C) 2007-2010 Open Information Security Foundation
+ *
+ * You can copy, redistribute or modify this Program under the terms of
+ * the GNU General Public License version 2 as published by the Free
+ * Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * version 2 along with this program; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ * 02110-1301, USA.
+ */
+
+/**
+ * \file
+ *
+ * \author Martin Petracek <martin.petracek@nic.cz>
+ */
+
+#ifndef _DETECT_MAC_H
+#define	_DETECT_MAC_H
+
+typedef struct DetectMacData_ {
+    uint8_t mac[6];
+}DetectMacData;
+
+void DetectMacRegister(void);
+
+#endif	/* _DETECT_MAC_H */
+
--- a/src/detect.c
+++ b/src/detect.c
@@ -129,6 +129,7 @@
 #include "detect-stream_size.h"
 #include "detect-engine-sigorder.h"
 #include "detect-ttl.h"
+#include "detect-mac.h"
 #include "detect-fast-pattern.h"
 #include "detect-itype.h"
 #include "detect-icode.h"
@@ -3836,6 +3837,7 @@ void SigTableSetup(void)
     DetectCsumRegister();
     DetectStreamSizeRegister();
     DetectTtlRegister();
+    DetectMacRegister();
     DetectTosRegister();
     DetectFastPatternRegister();
     DetectITypeRegister();
--- a/src/detect.h
+++ b/src/detect.h
@@ -1220,6 +1220,8 @@ enum {
     DETECT_ICMP_SEQ,
     DETECT_DSIZE,
 
+    DETECT_MAC,
+
     DETECT_FLOW,
     /* end prefilter sort */
 

--- a/src/flow.c
+++ b/src/flow.c
@@ -309,6 +309,13 @@ void FlowHandlePacketUpdate(Flow *f, Pac
             f->flags &= ~FLOW_PROTO_DETECT_TS_DONE;
             p->flags |= PKT_PROTO_DETECT_TS_DONE;
         }
+#ifdef NFQ
+    if (!f->hw_address_src_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting src MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_src_known = 1;
+        memcpy(f->hw_address_src, p->nfq_v.hw_address, 6);
+    }
+#endif
     } else {
         f->tosrcpktcnt++;
         f->tosrcbytecnt += GET_PKT_LEN(p);
@@ -324,6 +331,13 @@ void FlowHandlePacketUpdate(Flow *f, Pac
             f->flags &= ~FLOW_PROTO_DETECT_TC_DONE;
             p->flags |= PKT_PROTO_DETECT_TC_DONE;
         }
+#ifdef NFQ
+    if (!f->hw_address_dst_known && p->nfq_v.hw_address_known){
+        SCLogDebug("setting dst MAC address %02x:%02x:%02x:%02x:%02x:%02x", p->nfq_v.hw_address[0], p->nfq_v.hw_address[1], p->nfq_v.hw_address[2], p->nfq_v.hw_address[3], p->nfq_v.hw_address[4], p->nfq_v.hw_address[5]);
+        f->hw_address_dst_known = 1;
+        memcpy(f->hw_address_dst, p->nfq_v.hw_address, 6);
+    }
+#endif
     }
 
     if (SC_ATOMIC_GET(f->flow_state) == FLOW_STATE_ESTABLISHED) {
--- a/src/flow.h
+++ b/src/flow.h
@@ -435,6 +435,12 @@ typedef struct Flow_
     uint32_t tosrcpktcnt;
     uint64_t todstbytecnt;
     uint64_t tosrcbytecnt;
+#ifdef NFQ
+    uint8_t hw_address_src[6];
+    uint8_t hw_address_src_known;
+    uint8_t hw_address_dst[6];
+    uint8_t hw_address_dst_known;
+#endif
 } Flow;
 
 enum FlowState {
--- a/src/source-nfq.c
+++ b/src/source-nfq.c
@@ -426,6 +426,7 @@ static int NFQSetupPkt (Packet *p, struc
     int ret;
     char *pktdata;
     struct nfqnl_msg_packet_hdr *ph;
+    struct nfqnl_msg_packet_hw *hwaddr;
 
     ph = nfq_get_msg_packet_hdr(tb);
     if (ph != NULL) {
@@ -433,6 +434,13 @@ static int NFQSetupPkt (Packet *p, struc
         //p->nfq_v.hw_protocol = ntohs(p->nfq_v.ph->hw_protocol);
         p->nfq_v.hw_protocol = ph->hw_protocol;
     }
+    hwaddr = nfq_get_packet_hw(tb);
+    if (hwaddr != NULL) {
+        p->nfq_v.hw_address_known = 1;
+        memcpy(p->nfq_v.hw_address, hwaddr->hw_addr, 6);
+    } else {
+        p->nfq_v.hw_address_known = 0;
+    }
     /* coverity[missing_lock] */
     p->nfq_v.mark = nfq_get_nfmark(tb);
     if (nfq_config.mode == NFQ_REPEAT_MODE) {
--- a/src/source-nfq.h
+++ b/src/source-nfq.h
@@ -45,6 +45,8 @@ typedef struct NFQPacketVars_
     uint32_t ifi;
     uint32_t ifo;
     uint16_t hw_protocol;
+    uint8_t hw_address_known;
+    uint8_t hw_address[6];
 } NFQPacketVars;
 
 typedef struct NFQQueueVars_
--- a/src/flow-util.h
+++ b/src/flow-util.h
@@ -29,12 +29,23 @@
 
 #define COPY_TIMESTAMP(src,dst) ((dst)->tv_sec = (src)->tv_sec, (dst)->tv_usec = (src)->tv_usec)
 
+#ifdef NFQ
 #define RESET_COUNTERS(f) do { \
         (f)->todstpktcnt = 0; \
         (f)->tosrcpktcnt = 0; \
         (f)->todstbytecnt = 0; \
         (f)->tosrcbytecnt = 0; \
+       (f)->hw_address_src_known = 0; \
+       (f)->hw_address_dst_known = 0; \
     } while (0)
+#else
+#define RESET_COUNTERS(f) do { \
+        (f)->todstpktcnt = 0; \
+        (f)->tosrcpktcnt = 0; \
+        (f)->todstbytecnt = 0; \
+        (f)->tosrcbytecnt = 0; \
+    } while (0)
+#endif
 
 #define FLOW_INITIALIZE(f) do { \
         (f)->sp = 0; \

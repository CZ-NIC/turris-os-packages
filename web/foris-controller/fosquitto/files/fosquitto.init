#!/bin/sh /etc/rc.common

START=65
STOP=40

USE_PROCD=1

GENERATED_CONF=/var/etc/fosquitto.generated.conf
PLAIN_PASSWORD=/etc/fosquitto/credentials.plain  # local:<random_password>
HASHED_PASSWORD=/etc/fosquitto/credentials.hashed  # local:<hashed_random_password>

generate_password() {
	local new_password=$(hexdump -n 16 -e '4/4 "%08X" 1 "\n"' /dev/urandom)
	local stored_umask=$(umask)
	umask 0077
	mkdir -p /etc/fosquitto/bridges
	chown mosquitto /etc/fosquitto
	chown -R mosquitto /etc/fosquitto/bridges
	echo "local:${new_password}" > "${PLAIN_PASSWORD}"
	cp "${PLAIN_PASSWORD}" "${HASHED_PASSWORD}"
	mosquitto_passwd -U "${HASHED_PASSWORD}"
	umask ${stored_umask}

	# Sync these files just to make sure that content is written to disk.
	# In rare occurances only part of data is written which makes file content invalid.
	sync
}

generate_global() {
	config_get_bool debug global debug "0"
	if [ "$debug" = "1" ] ; then
		echo "log_type all"
	else
		echo "log_type error"
		echo "log_type warning"
	fi
	echo "log_dest stderr"
	echo "per_listener_settings true"
	echo "autosave_interval 0"
	echo "persistence true"
	echo "persistence_file /tmp/fosquitto.db"
	echo "queue_qos0_messages true"
	echo "password_file ${HASHED_PASSWORD}"
	echo "allow_anonymous false"
	echo
}

generate_local() {
	config_get port local port 11883
	echo "port $port"
	echo "bind_address localhost"
	echo
}

generate_remote() {
	echo

	config_get_bool enabled remote enabled "0"
	config_get port remote port "11884"
	if [ "$enabled" -eq 1 -a -f /etc/ssl/ca/remote/ca.crt -a -f /etc/ssl/ca/remote/01.crt -a -f /etc/ssl/ca/remote/ca.crl ]; then
		echo "listener ${port} 0.0.0.0"
		echo "protocol mqtt"
		echo "tls_version tlsv1.2"
		echo "use_identity_as_username true"
		echo "cafile /etc/ssl/ca/remote/ca.crt"
		echo "certfile /etc/ssl/ca/remote/01.crt"
		echo "keyfile /etc/ssl/ca/remote/01.key"
		echo "crlfile /etc/ssl/ca/remote/ca.crl"
		echo "require_certificate true"

		echo
	fi
}

append_topic() {
	local id=$(echo $1 | xargs)  # removes trailing whitespaces
	if [ -n $id ] ; then
		echo "topic foris-controller/$id/notification/+/action/+ in 0"
		echo "topic foris-controller/$id/request/+/action/+ out 0"
		echo "topic foris-controller/$id/list out 0"
		echo "topic foris-controller/$id/request/+/list out 0"
		echo "topic foris-controller/$id/list out 0"
		echo "topic foris-controller/$id/schema out 0"
		echo "topic foris-controller/$id/reply/+ in 0"
	fi
}

load_subsubordinate() {
	local id="$1"
	config_get via "$id" via
	config_get_bool enabled "$id" enabled 0
	if [ -n "$via" -a "$enabled" == 1 ] ; then
		local subsub_varname=subsubordinate_$id
		local tmp="$(eval echo "\$$subsub_varname") $id"
		eval "subsubordinate_$via=\"$tmp\""
	fi
}

generate_subordinate() {
	local id="$1"
	config_get address "$id" address
	config_get port "$id" port 11884
	config_get_bool enabled "$id" enabled 0
	if [ "$enabled" == 0 -o -z "$address" ]; then
		return
	fi

	echo
	echo "connection ${id}"
	echo "address ${address}:${port}"
	echo "restart_timeout 5"
	echo "keepalive_interval 5"
	echo "bridge_cafile /etc/fosquitto/bridges/${id}/ca.crt"
	echo "bridge_certfile /etc/fosquitto/bridges/${id}/token.crt"
	echo "bridge_keyfile /etc/fosquitto/bridges/${id}/token.key"
	echo "bridge_insecure true"
	echo "bridge_tls_version tlsv1.2"

	append_topic "$id"
	local subsub_varname=subsubordinate_$id
	for subsub_id in $(eval echo "\$$subsub_varname") ; do
		append_topic "$subsub_id"
	done

	echo
}

generate_config() {
	echo "Generating fosquitto config file in $GENERATED_CONF"
	echo "# fosquitto.conf file generated from UCI config." > "$GENERATED_CONF"

	config_load fosquitto

	{
		generate_global
		generate_local
		generate_remote
		config_foreach load_subsubordinate subsubordinate
		config_foreach generate_subordinate subordinate
	} >> "$GENERATED_CONF"
}

try_chown_dirs() {
	if [ ! mosquitto = "$(stat -c '%U' /etc/fosquitto)" ] ; then
		chown mosquitto /etc/fosquitto/
		mkdir -p /etc/fosquitto/bridges
		chown -R mosquitto /etc/fosquitto/bridges
	fi
}

check_credentials_in_file() {
	local file=$1
	grep -q '^local:' "$file"
}

check_fosquitto_credentials() {
	check_credentials_in_file "$HASHED_PASSWORD" || return 1
	check_credentials_in_file "$PLAIN_PASSWORD" || return 1
}

check_credentials_files() {
	[ -e "$PLAIN_PASSWORD" -a -e "$HASHED_PASSWORD" ]
}

start_service() {
	generate_config

	if ! check_credentials_files || ! check_fosquitto_credentials; then
		generate_password
	fi
	try_chown_dirs

	procd_open_instance
	procd_set_param command mosquitto
	procd_append_param command -c $GENERATED_CONF
	procd_set_param file $CONF_WATCH
	procd_set_param pidfile /var/run/fosquitto.pid
	procd_set_param stdout 1 # forward stdout of the command to logd
	procd_set_param stderr 1 # same for stderr
	procd_set_param respawn ${respawn_threshold:-3600} ${respawn_timeout:-0.2} ${respawn_retry:-25}
	procd_close_instance
}


service_triggers() {
	# Makes "reload_config" work
	procd_add_reload_trigger "fosquitto"
}
